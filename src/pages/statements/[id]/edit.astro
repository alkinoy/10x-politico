---
/**
 * Edit Statement Page
 * Path: /statements/:id/edit
 *
 * Allows authenticated users to edit their own statements within the 15-minute grace period.
 * Displays a pre-filled form with the politician field disabled (cannot be changed).
 * Shows a grace period indicator with remaining edit time.
 *
 * Authentication Required: Yes
 * Authorization: Statement owner only, within grace period
 */

import Layout from "@/layouts/Layout.astro";
import EditStatementForm from "@/components/statements/EditStatementForm";
import { getSupabaseClientAnon } from "@/db/client";
import { StatementService } from "@/lib/services/statement-service";
import type { StatementDetailDTO } from "@/types";

// Check if user is authenticated
const token = Astro.cookies.get("sb-access-token")?.value;
const statementId = Astro.params.id;

if (!token) {
  // Not authenticated, redirect to auth page with return URL
  return Astro.redirect(`/auth?returnUrl=/statements/${statementId}/edit`);
}

// Verify token is valid
const supabase = getSupabaseClientAnon();
const {
  data: { user },
  error: authError,
} = await supabase.auth.getUser(token);

if (!user || authError) {
  // Invalid token, redirect to auth
  return Astro.redirect(`/auth?returnUrl=/statements/${statementId}/edit`);
}

// Fetch statement data
let statement: StatementDetailDTO | null = null;
let fetchError: string | null = null;
let errorType: "not_found" | "permission_denied" | "grace_period_expired" | "generic" = "generic";

try {
  if (!statementId) {
    fetchError = "Statement ID is required";
    errorType = "not_found";
  } else {
    const statementService = new StatementService();
    statement = await statementService.getStatementById(statementId, user.id);

    if (!statement) {
      fetchError = "Statement not found";
      errorType = "not_found";
    } else {
      // Check ownership
      if (statement.created_by_user_id !== user.id) {
        fetchError = "You don't have permission to edit this statement";
        errorType = "permission_denied";
        statement = null;
      }
      // Check if can_edit flag is true
      else if (!statement.can_edit) {
        fetchError = "The grace period for editing has expired (15 minutes after creation)";
        errorType = "grace_period_expired";
        statement = null;
      }
    }
  }
} catch (error) {
  fetchError = "Failed to load statement";
  errorType = "generic";
  console.error("Error fetching statement:", error);
}
---

<Layout title={statement ? "Edit Statement - SpeechKarma" : "Error - SpeechKarma"}>
  <main class="min-h-screen bg-background">
    <div class="container mx-auto max-w-3xl px-4 py-8 sm:py-12">
      {
        fetchError ? (
          <div class="space-y-4">
            <div
              class={`rounded-lg border p-6 ${
                errorType === "not_found"
                  ? "border-red-200 bg-red-50 text-red-800"
                  : errorType === "grace_period_expired"
                    ? "border-amber-200 bg-amber-50 text-amber-800"
                    : "border-red-200 bg-red-50 text-red-800"
              }`}
              role="alert"
            >
              <p class="font-semibold text-lg mb-2">
                {errorType === "not_found"
                  ? "Statement Not Found"
                  : errorType === "grace_period_expired"
                    ? "Grace Period Expired"
                    : errorType === "permission_denied"
                      ? "Permission Denied"
                      : "Error"}
              </p>
              <p>{fetchError}</p>
            </div>

            <div class="flex gap-3">
              <a
                href="/"
                class="inline-flex items-center justify-center rounded-md border border-input bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
              >
                Go to Home
              </a>
              {errorType === "grace_period_expired" && statementId && (
                <a
                  href={`/politicians/${statement?.politician_id || ""}`}
                  class="inline-flex items-center justify-center rounded-md bg-primary px-4 py-2 text-sm font-medium text-primary-foreground transition-colors hover:bg-primary/90 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
                >
                  View Statement
                </a>
              )}
            </div>
          </div>
        ) : statement ? (
          <EditStatementForm client:load statement={statement} currentUserId={user.id} />
        ) : (
          <div class="rounded-lg border border-gray-200 bg-gray-50 p-6" role="status">
            <p class="text-gray-600">Loading statement...</p>
          </div>
        )
      }
    </div>
  </main>
</Layout>
